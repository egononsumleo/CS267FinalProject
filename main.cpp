#include "RBS.h"
#include "stdc++.h"

int main(){
    int digits = 128;
	mpfr::mpreal::set_default_prec(mpfr::digits2bits(digits));

    /* Setting up */
    const int procs = 57;
    double eps = 0.1;
	const int PROBLEM_SIZE = 1000000/64; 
	const int M = 400;

	// vector<Selector*> selectors = {new MedianSelector(), new RandomSelector(), new QSelector()};
	MedianAnswerer answerer = MedianAnswerer();
	Solver solver = Solver();	
	// AdaptiveSolver solver = AdaptiveSolver();	

    /* Initialize the strategies that we will test */
    /* A strategy is a vector of length procs that decides on which quantiles we will query.
       For example, the Equal Splitting strategy will query at 1/p, 2/p, ... 1.
       The Median strategy always queries at 0.5.
    */

    vector< vector<F> > strategies;
    vector < string > strategy_name;

    /* START OF STRATEGIES */

    /* 1. Median strategy */
    vector<F> median;
    for(int i = 0;i < procs; ++i){
        median.push_back(0.5);
    }
    strategies.push_back(median);
    strategy_name.push_back("Parallel naive");

    /* 2. Equal Splitting strategy */
    vector<F> equal;
    for(int i = 0;i < procs; ++i){
        equal.push_back(float(i+1)/(procs+1));
    }
    strategies.push_back(equal);
    strategy_name.push_back("Equal splitting");

    /* 3. Simple Lookahead strategy */
    // Given the way we modify the Bayesian posterior, the lookahead strategy should be very close to querying
    // 1/2, 1/2 - eps/procs, 1/2 + eps/procs, 1/2 - 2*eps/procs, 1/2 + 2*eps/procs, ...
    vector<F> simple_lookahead;
    for(int i = 0;i < procs; ++i) {
        int sign = 2*(i % 2) - 1; // sign is 1 on odd and -1 on even
        int magnitude = (i+1)/2; // magnitude is 0, 1, 1, 2, 2, ...
        simple_lookahead.push_back(0.5 + sign * magnitude * (double)eps/(double)procs);
    }
    strategies.push_back(simple_lookahead);
    strategy_name.push_back("Simple lookahead");

    /* 4. Actual Lookahead strategy */
    // Computes the actual quantiles by simulating all possibilities from look_ahead.py
    // 1 procs
    // vector<F> lookahead = {0.5};
    // 3 procs
    // vector<F> lookahead = {0.4166666666666667, 0.5, 0.5833333333333334};
    // 7 procs
    // vector<F> lookahead = {0.34722222222222227, 0.4166666666666667, 0.48611111111111116, 0.5, 0.5138888888888888, 0.5833333333333334, 0.6527777777777778};
    // 15 procs
    // vector<F> lookahead = {0.2893518518518519, 0.34722222222222227, 0.40509259259259267, 0.4166666666666667, 0.4282407407407407, 0.4340277777777778, 0.48611111111111116, 0.5, 0.5138888888888888, 0.5659722222222224, 0.5717592592592593, 0.5833333333333334, 0.5949074074074073, 0.6527777777777778, 0.7106481481481481};
    // 31 procs
    // vector<F> lookahead = {0.2411265432098766, 0.2893518518518519, 0.33757716049382724, 0.34722222222222227, 0.3568672839506173, 0.3616898148148148, 0.3616898148148149, 0.40509259259259267, 0.4166666666666667, 0.4282407407407407, 0.4340277777777778, 0.4716435185185187, 0.4764660493827161, 0.48611111111111116, 0.4957561728395061, 0.5, 0.5042438271604939, 0.5138888888888888, 0.5235339506172839, 0.5283564814814815, 0.5659722222222224, 0.5717592592592593, 0.5833333333333334, 0.5949074074074073, 0.6383101851851851, 0.6383101851851853, 0.6431327160493827, 0.6527777777777778, 0.6624228395061728, 0.7106481481481481, 0.7588734567901234};
    // 63 procs
    // vector<F> lookahead = {0.2009387860082305, 0.2411265432098766, 0.2813143004115227, 0.2893518518518519, 0.2973894032921811, 0.3014081790123457, 0.30140817901234573, 0.30140817901234573, 0.33757716049382724, 0.34722222222222227, 0.3568672839506173, 0.3616898148148148, 0.3616898148148149, 0.39303626543209896, 0.3970550411522634, 0.40509259259259267, 0.4131301440329218, 0.4166666666666667, 0.42020318930041156, 0.421971450617284, 0.4282407407407407, 0.4340277777777778, 0.43627829218106995, 0.4402970679012346, 0.44608410493827155, 0.4521122685185185, 0.4521122685185186, 0.4716435185185187, 0.4764660493827161, 0.48611111111111116, 0.4957561728395061, 0.5, 0.5042438271604939, 0.5138888888888888, 0.5235339506172839, 0.5283564814814815, 0.5478877314814814, 0.5478877314814816, 0.5539158950617284, 0.5597029320987655, 0.56372170781893, 0.5659722222222224, 0.5717592592592593, 0.578028549382716, 0.5797968106995884, 0.5833333333333334, 0.5868698559670782, 0.5949074074074073, 0.6029449588477366, 0.6069637345679012, 0.6383101851851851, 0.6383101851851853, 0.6431327160493827, 0.6527777777777778, 0.6624228395061728, 0.6985918209876543, 0.6985918209876543, 0.6985918209876545, 0.7026105967078189, 0.7106481481481481, 0.7186856995884773, 0.7588734567901234, 0.7990612139917695};

    // strategies.push_back(lookahead);
    // strategy_name.push_back("Lookahead");

    /* 5. Entropy Optimal via Gradient Descent */
    // 1 procs
    // vector<F> entropy_optimal = {0.5};
    // 3 procs
    // vector<F> entropy_optimal = {0.48073380387480535, 0.49999996428220667, 0.5192662973631037};
    // 7 procs
    // vector<F> entropy_optimal = {0.4635624410135427, 0.4813947555477728, 0.49837781584432167, 0.5, 0.5016218979707873, 0.5186050283718557, 0.5364375571500495};
    // 15 procs
    // vector<F> entropy_optimal = {0.44682301377817496, 0.4637143400093893, 0.47962723802743534, 0.4813562690251669, 0.48155226575351157, 0.49745287158137996, 0.49998999567787655, 0.49999999567787656, 0.5000099956778765, 0.5025473812353886, 0.5184477001077291, 0.5186435931686747, 0.5203731243436185, 0.536285815232788, 0.553177278919289};
    // 28 procs
    // vector<F> entropy_optimal = {0.4310378679140876, 0.4475508495100017, 0.46312668277900065, 0.4642328540219016, 0.46424285402190163, 0.479237880016011, 0.48513747773015287, 0.4851474777301529, 0.4851574777301529, 0.4851972465049551, 0.49758151281810103, 0.5020220482722065, 0.5020320482722066, 0.5020420482722066, 0.5020520482722066, 0.5020620482722066, 0.5020720482722066, 0.5026945711674778, 0.5111052221150487, 0.5111152221150488, 0.5196379312147558, 0.5196479312147558, 0.5196579312147558, 0.5218384299826584, 0.5368972405050655, 0.5448482185217046, 0.5448582185217047, 0.5694917263186735};
    // 31 procs
    // vector<F> entropy_optimal = {0.43015326941020887, 0.44660087494765055, 0.4622698593474061, 0.46271200063645024, 0.463663865381379, 0.47853717859890554, 0.4804150215616535, 0.4804250215616535, 0.4804350215616535, 0.48187061542966286, 0.4964709372018966, 0.49648093720189657, 0.49812627715117735, 0.49998039928574345, 0.49999039928574346, 0.5000003992857435, 0.5000103992857434, 0.5000203992857435, 0.5018739941030633, 0.503519285465945, 0.503529285465945, 0.5181297779358827, 0.5195655750534574, 0.5195755750534574, 0.5195855750534574, 0.5214635901675466, 0.5363371429945477, 0.5372885234655407, 0.5377304045167289, 0.5533998758533965, 0.5698475056902559};
    // 57 procs
    vector<F> entropy_optimal = {0.4148947595648777, 0.4309760653297672, 0.44606062712714767, 0.44663975565953684, 0.44790172944075063, 0.46219613763744327, 0.46684734851762505, 0.46685734851762506, 0.46686734851762507, 0.4668773485176251, 0.478957353271895, 0.48206478425152455, 0.48207478425152456, 0.48208478425152457, 0.4820947842515245, 0.48210478425152453, 0.48211478425152454, 0.48262643677257167, 0.4890079963362091, 0.4890179963362091, 0.49654019814300476, 0.4965501981430047, 0.4965601981430047, 0.49820097254435525, 0.4989271602242955, 0.4989371602242955, 0.4989471602242955, 0.49895716022429554, 0.4989671602242955, 0.4989771602242955, 0.4989871602242955, 0.4989971602242955, 0.49900716022429553, 0.4990171602242955, 0.5022912054440245, 0.5074344881767548, 0.5074444881767549, 0.5074544881767549, 0.5074644881767549, 0.5190270628449165, 0.5218298957260545, 0.5218398957260545, 0.5218498957260546, 0.5218598957260545, 0.5218698957260545, 0.5218798957260545, 0.5218898957260545, 0.5292855284955909, 0.5292955284955909, 0.537533203576144, 0.537543203576144, 0.537553203576144, 0.5387904258226082, 0.5535206533667077, 0.56139116445296, 0.56140116445296, 0.5852445028553842};
    // 58 procs
    // vector<F> entropy_optimal = {0.41486716701434667, 0.4309406410472957, 0.4460196618803791, 0.4466101131558872, 0.4478662555624829, 0.46215644263348893, 0.4666513710978442, 0.4666613710978442, 0.46667137109784423, 0.46668137109784424, 0.47893220152602695, 0.4801071844067013, 0.4801171844067013, 0.4801271844067013, 0.48013718440670133, 0.4801471844067013, 0.4801571844067013, 0.48117101032492565, 0.4824931832725023, 0.4825031832725023, 0.4959252213930451, 0.5001906436533811, 0.5002006436533811, 0.5002106436533811, 0.5002206436533811, 0.5004210972874252, 0.5004310972874252, 0.5004410972874253, 0.5004510972874252, 0.5004610972874252, 0.5004710972874252, 0.5004810972874252, 0.5004910972874252, 0.5005010972874252, 0.5005110972874252, 0.5025866953080348, 0.5076828404775762, 0.5076928404775761, 0.5077028404775762, 0.5077128404775761, 0.5191919360528675, 0.5220325870564733, 0.5220425870564732, 0.5220525870564733, 0.5220625870564732, 0.5220725870564733, 0.5220825870564733, 0.5220925870564732, 0.529416450647248, 0.529426450647248, 0.537693449317848, 0.5377034493178481, 0.537713449317848, 0.5389276243301873, 0.553646115751059, 0.5615241719635667, 0.5615341719635668, 0.5853648162062415};
    // 59 procs
    // vector<F> entropy_optimal = {0.4147753011685614, 0.4308519072565697, 0.44593793598530573, 0.446540849257257, 0.4477731250561556, 0.4620811039610618, 0.4665569018719756, 0.46656690187197564, 0.46657690187197565, 0.46658690187197566, 0.478879528798849, 0.4799512108150641, 0.4799612108150641, 0.4799712108150641, 0.4799812108150641, 0.4799912108150641, 0.4800012108150641, 0.4810447724377821, 0.4823325257585949, 0.48234252575859493, 0.4957523961571821, 0.49924316997391416, 0.49925316997391417, 0.4992631699739142, 0.4992731699739142, 0.4992831699739142, 0.4992931699739142, 0.49930316997391416, 0.4993131699739142, 0.4993231699739142, 0.4993331699739142, 0.4993431699739142, 0.49935316997391416, 0.49936316997391417, 0.4993731699739142, 0.5021629148127856, 0.507212089992538, 0.5072220899925379, 0.5072320899925379, 0.507242089992538, 0.5187735225315722, 0.5196230039868024, 0.5196330039868023, 0.5196430039868024, 0.5196530039868024, 0.5196630039868024, 0.5196730039868024, 0.520698779536353, 0.5222158682776697, 0.5222258682776697, 0.5363816244947811, 0.5411006167525066, 0.5411106167525066, 0.5411206167525067, 0.5411306167525066, 0.5536060335737667, 0.5616532383898694, 0.5616632383898694, 0.5853615837169508};
    // 60 procs
    // vector<F> entropy_optimal = {0.4147421840214012, 0.43085625158483803, 0.44583987638387446, 0.4466040299780006, 0.44777686768467145, 0.46189904540028054, 0.46317619163750556, 0.4631861916375056, 0.4631961916375056, 0.4643262715123884, 0.4782053306750007, 0.4782153306750007, 0.4797797060810852, 0.4826747178939726, 0.4826847178939726, 0.4826947178939726, 0.4827047178939726, 0.48271471789397263, 0.4829598376761884, 0.4833206786094731, 0.48333067860947304, 0.496143842548903, 0.5003020148594453, 0.5003120148594453, 0.5003220148594453, 0.5003320148594452, 0.5004506709924357, 0.5004606709924356, 0.5004706709924357, 0.5004806709924357, 0.5004906709924357, 0.5005006709924357, 0.5005106709924356, 0.5005206709924357, 0.5005306709924356, 0.5005406709924357, 0.5024168581315026, 0.5074155510890614, 0.5074255510890615, 0.5074355510890615, 0.5074455510890615, 0.5189102565358549, 0.5197680175374388, 0.5197780175374388, 0.5197880175374388, 0.5197980175374388, 0.5198080175374388, 0.5198180175374388, 0.5207550541026231, 0.5222933658362932, 0.5223033658362932, 0.5364720420390076, 0.5411970402324465, 0.5412070402324465, 0.5412170402324464, 0.5412270402324465, 0.5537048713492482, 0.5617594570233363, 0.5617694570233364, 0.5854992317358728};
    // 61 procs
    // vector<F> entropy_optimal = {0.41477161752216524, 0.43054705146828387, 0.4454337014327374, 0.4461000002900945, 0.44739883307634226, 0.46139409707997053, 0.46265187809959946, 0.46266187809959947, 0.4626718780995995, 0.4642550845246524, 0.4780102207796668, 0.4780202207796668, 0.4794981588296301, 0.48219544195927455, 0.4822054419592745, 0.4822154419592745, 0.4822254419592745, 0.48223544195927454, 0.48252231105598326, 0.48317479779332084, 0.4831847977933208, 0.4960964435945315, 0.49931007210941325, 0.49932007210941326, 0.49933007210941327, 0.4993400721094133, 0.4993500721094133, 0.49936007210941324, 0.49937007210941325, 0.49938007210941326, 0.4993900721094133, 0.4994000721094133, 0.49941007210941324, 0.49942007210941325, 0.49943007210941326, 0.49944007210941327, 0.5018493266373188, 0.5037927807452134, 0.5038027807452135, 0.5038127807452134, 0.5045202858930725, 0.5180509843327251, 0.5180609843327251, 0.5192043544289441, 0.5224958759452311, 0.522505875945231, 0.5225158759452311, 0.522525875945231, 0.5225358759452311, 0.522545875945231, 0.5227384338684002, 0.5227484338684003, 0.5365136696017329, 0.5417248175664507, 0.5417348175664507, 0.5417448175664508, 0.5417548175664507, 0.5539479120813171, 0.5621658989322613, 0.5621758989322614, 0.5854628330826938};
    // 62 procs
    // vector<F> entropy_optimal = {0.4148029478078018, 0.4305495204000624, 0.445413190043738, 0.44607518124350626, 0.44736190344188875, 0.46131725053692463, 0.462471795631246, 0.46248179563124603, 0.462491795631246, 0.4641840760622037, 0.47785353659760454, 0.47786353659760455, 0.47932946861774284, 0.47991587999231855, 0.47992587999231856, 0.47993587999231857, 0.4799458799923185, 0.47995587999231853, 0.48123632704993574, 0.48228907159725365, 0.48229907159725366, 0.4956944338869155, 0.4965125195743386, 0.4965225195743386, 0.49653251957433864, 0.498438663084496, 0.5012355991862026, 0.5012455991862026, 0.5012555991862027, 0.5012655991862026, 0.5012755991862027, 0.5012855991862026, 0.5012955991862026, 0.5013055991862027, 0.5013155991862026, 0.5013255991862027, 0.5013355991862026, 0.5022478061495705, 0.5041773424945681, 0.5041873424945681, 0.5041973424945682, 0.5047248507408038, 0.5182626980298485, 0.5182726980298485, 0.5193995035450584, 0.522776806713796, 0.522786806713796, 0.522796806713796, 0.522806806713796, 0.5228168067137959, 0.522826806713796, 0.5229442141421461, 0.5229542141421462, 0.5366793048419116, 0.5419035002349663, 0.5419135002349662, 0.5419235002349662, 0.5419335002349662, 0.5540880199586167, 0.5622912445622977, 0.5623012445622978, 0.5855418826809873};
    // 63 procs
    // vector<F> entropy_optimal = {0.4152918523389327, 0.4304811495712107, 0.4451616712503585, 0.44564991585020686, 0.4471890988194534, 0.4609077606757841, 0.46207543774085075, 0.4620854377408507, 0.4620954377408507, 0.4645101967612611, 0.47781275940932677, 0.4778227594093268, 0.47922167484796724, 0.4793463371785009, 0.4793563371785009, 0.4793663371785009, 0.4793763371785009, 0.47938633717850093, 0.4814611055841553, 0.48271650526296284, 0.48272650526296285, 0.495910125637268, 0.49637651192061616, 0.49638651192061617, 0.4963965119206162, 0.4982920869796602, 0.4999501593631548, 0.49996015936315474, 0.49997015936315475, 0.49998015936315476, 0.4999901593631548, 0.5000001593631548, 0.5000101593631547, 0.5000201593631548, 0.5000301593631548, 0.5000401593631548, 0.5000501593631548, 0.5017078944544977, 0.5036034862509652, 0.5036134862509651, 0.5036234862509652, 0.5040898892586586, 0.5172740806553954, 0.5172840806553953, 0.5185387002994158, 0.5206135131959347, 0.5206235131959347, 0.5206335131959346, 0.5206435131959347, 0.5206535131959347, 0.520777210500872, 0.5221767779274706, 0.5221867779274706, 0.5354889104071354, 0.5379042154627235, 0.5379142154627234, 0.5379242154627235, 0.5390932735836644, 0.5528097103338222, 0.554349833516779, 0.5548371469522237, 0.5695193937852223, 0.584707434132887};

    strategies.push_back(entropy_optimal);
    strategy_name.push_back("Entropy optimal");

    /* 6. Entropy Optimal (slow) via Gradient Descent */
    bool option6_included = false;
    vector<F> entropy_optimal_slow;
    if (procs == 7) {
        entropy_optimal_slow = {0.3802347183227539, 0.42105579376220703, 0.4593982696533203, 0.49627113342285156, 0.532496452331543, 0.5688285827636719, 0.6061315536499023};
        option6_included = true;
    }
    if (procs == 12) {
        entropy_optimal_slow = {0.3222923278808594, 0.35715389251708984, 0.3894939422607422, 0.420135498046875, 0.4496583938598633, 0.47847747802734375, 0.5069131851196289, 0.5352382659912109, 0.5637197494506836, 0.5926542282104492, 0.6224336624145508, 0.6536483764648438};
        option6_included = true;
    }
    if (option6_included) {
        strategies.push_back(entropy_optimal_slow);
        strategy_name.push_back("Entropy optimal (slow)");
    }

    /* END OF STRATEGIES */

    std::uniform_int_distribution<> distrib(1, PROBLEM_SIZE-1); // constructs uniform distribution over the integers in [1, PROBLEM_SIZE)

    auto delta = mpfr::mpreal(.1); // we keep iterating until we have 1 - delta confidence => 1 - delta success rate

    for(int strat = 0; strat < strategies.size(); ++strat) { // for every strategy
        auto pivots = strategies[strat];

        F correct = 0;
        int total_flips = 0;
        for(int j = 0;j < M; ++j) {

            // Prepare the problem instance
            int answer = distrib(generator); // choose the answer that we want at random
            auto instance = StandardInstance(PROBLEM_SIZE, answer, eps); // initialize the problem instance where we have PROBLEM_SIZE number of coins with biases 1/2-eps, ..., 1/2-eps (<-answer), 1/2+eps, ..., 1/2+eps

            int iterations;
            int res = solver.solve(instance, pivots, answerer, eps, delta, iterations);

            if(res == answer) { // if we have successfully computed the answer
                ++ correct;
            }
            total_flips += iterations;
        }
        cout << "Strategy: " << strategy_name[strat] << " -- Accuracy: "  << correct/M << " -- Avg # of flips: " << (double)total_flips/(double)M << endl;
    }
}
